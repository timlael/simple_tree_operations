P0
Programming refreshment, practice with standards and header files, practice with trees,
traversals, and file IO.
Submission:
/accounts/classes/janikowc/submitProject/submit_cs4280E01_P0
SubmitFileOrDirectory
Write a program to build a tree and print it using different traversals. The program will be
invoked as
• P0 [file]
where file is an optional argument. If the file argument is not given the program
will read data from the keyboard as a file device. If the argument is given, the
program reads data file file.datE01. (note that file is any name and the
extension is implicit). Programs improperly implementing file name or executable will
not be graded. Example invocations:
◦ P0 //read from the keyboard until simulated keyboard EOF, 100% max
◦ P0 < somefile // same as above except redirecting from somefile
instead of keyboard
◦ P0 somefile // read from somefile.datE01, 100% max or 80% if the
only option
• Assume you do not know the size of the input file
• Assume the input data is all strings starting with lower case letter and separated with
standard WS separators
• If the input file is not readable for whatever reason, or command line arguments are
not correct, the program will abort with an appropriate message
• The program will read the data left to right and put them into a tree, which is a
version of the binary search tree (BST) called EBST
◦ A node contains
◾ a letter
◾ left EBST subtree
◾ right EBST subtree
◾ middle subtree containing a list of the seen strings starting this letter -
whether it is middle or separate makes no difference
◾ Note: a repeated string will be treated as a new string
◦ Tree is never balanced nor restructured other than growing new nodes
• The program will subsequently output 3 files corresponding to the 3 traversals,
named file.preorder, file.inorder and file.postorder. Note that file is the
name of the input file if given, and it is out if the input is from the keyboard.
◾ Treversals
◾ preorder
◾ inorder
◾ postoder
◾ Printing in traversal
◾ EBST node will print the letter intended by 2 x depth of the node
followed by the list of strings so that the newer strings show up
first
• Example (x is null pointer)
File xxx.datE01 contains
cola bob adam mary marian bobcat alena
◦ invocation: > P0 xxx
◾ Output files: xxx.inorder xxx.preorder xxx.postorder
◦ Invocation: > P0
◾ Output files: out.inorder out.preorder out.postorder
• Standards related requirements:
◦ See the Suggestions for additional requirements. Suggested prototypes (just
suggested)
node_t *buildTree(FILE *);
void traverseInorder(node_t*, const char[]); // tree
root, and output basefilename
void traversePreorder(node_t*, const char[]);
void traversePostorder(node_t*, const char[]);
◦ You must use appropriate header files (node.h, buildTree.h and
traversals.h)
◦ Use this functional architecture even if you program in a language different
from C
◦ Program will be graded on execution 80% and architectural structure and
standards 20%
Traversals
Taken from the 3130 textbook:
Preorder:
• process root
• process children left to right
Inorder:
• process left child
• process root
• proccess right child
Postorder:
• process children left to right
• process root
Suggestions and some Architectureal Requirements
Using top-down decomposition you have 3 tasks in main:
1. Process command arguments, set up file to work regardless of
source, check if file readable, set the basename for the output
file, etc.
2. Build the tree
3. Traverse the tree three different ways generating outputs
The main function should handle the 3 functionalities. #1 should be
handled inside of main, functions for #2 should be in a separate source,
and functions for #3 should be in another separate source. Any node
types should be defined in a separate header file.
For development purposes, do either 1 or 2 first. 3 should follow 2, first
with one traversal only.
Processing either keyboard or file input can be done in either way:
1. If keyboard input, read the input into temporary file, after which
the rest of the program always processes file input
2. If keyboard input, set file pointer to stdin. es;e set file pointer to
the actual file, then process always from the file pointer
Files:
• node.h, main.c, traversals.c+treversals.h,
buildTree.c+buildTree.h
• main.c
◦ #include "node.h"
#include "traversals.h"
#include "buildTree.h"
int main(int argc, char* argv[]) {
// process command line arguments and
make sure file is readable, error
otherwise
// set up keyboard processing so that
below the input is not relevant
node_t *root = buildTree(file);
preorder(root);
inorder(root);
postorder(root);
return 0;
}
Print tree with identation
static void printParseTree(nodeType *rootP,int level) {
if (rootP==NULL) return;
printf("%*c%d:%-9s ",level*2,' ',level,NodeId.info); // assume
some info printed as string
printf("\n");
printParseTree(rootP->child1,level+1);
printParseTree(rootP->child2,level+1);
printParseTree(rootP->child3,level+1);
}
Testing
This section is non-exhaustive testing of P1
1. Create test files:
1. P0_test1.4280E01 containing empty file
2. P0_test2.4280E01 containing one string:
adam
3. P0_test3.4280E01 containing one string repeated five times across same
line and multiple lines:
adam adam adam
adam
adam
4. P0_test4.4280E01 containing multiple strings with some repetitions:
mary marian adam mary adam john adam mary john tesla
bob bob
2. For each test file, draw by hand the tree that should be generated. For example,
P0_test3.4280E01 should create just one node 'a' with adam repeated 5 times
3. Decide on invocations and what should happen, what should be output filenames if
no error, and what the output files should look like - using the hand drawn trees for
each file
4. Run the invocations and check against predictions
1. $ P0 < P0_test1
Error
2. $ P0 < P0_test3.4280E01
Outputs out.inorder out.preorder out.postorder, each containing
a adam adam adam adam adam
3. $ P0 P0_test3
Outputs P0_test3.inorder P0_test3.preorder P0_test3.postorder containing as
above
4. $ P0 P0_test4
Outputs as above containing trees as determined by hand
